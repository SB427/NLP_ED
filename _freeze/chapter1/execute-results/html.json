{
  "hash": "562b42dd3fbff7f5e51d9e4f94179756",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Prise en main\"\nexecute: \n  eval: false\n---\n\n\n## Introduction\n\nLe document de travail contient deux types d'éléments : du texte pour expliquer et présenter ce que l'on fait et du code pour réaliser les manipulations de données, les analyses et les graphiques. On commence toujours un document avec un bloc de code de setup, pour lister et charger les packages que l'on va utiliser et les options générales pour l'édition du document.\n\nLa publication des documents peut se faire en différents formats : html, word, pdf (via latex), présentation html (via revealjs), présentation powerpoint, présentation beamer(via latex), ...\nOn se référera au site de [Quarto](https://quarto.org/) pour plus de détails.\n\nIci, on commence simplement avec quelques manipulations pour comprendre l'environnement de travail, puis on verra comment charger des données sous différents formats.\n\n## Premières manipulations\n\n-   Créer un document script (.R) : pour simplement éditer du code\n-   Créer un document quarto (.qmd) : pour mixer du code et du texte\n-   Commenter du code\n-   Afficher de l'aide sur une fonction\n\n\n## Charger des données\n\n### Un tableau de données\n\nFichier .csv, .xlsx, .rds\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-read.csv(\"le/chemin/de/mon/fichier.csv\")\n\nlibrary(readxl)\ndata<-read_xlsx(\"le/chemin/de/mon/fichier.xlsx\")\n\nlibrary(readr)\ndata<- read_rds(\"le/chemin/de/mon/fichier.rds\")\n```\n:::\n\n\n\n### Une collection de fichier textes\n\nUn dossier avec plusieurs fichier .txt ou .docx ou .pdf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readtext)\n#Exemple de nom de document : \"int1_2024_dirigeant.txt\"\ndata<-readtext(\"le/chemin/de/mes/fichiers/*.txt\",\n         docvarsfrom = \"filenames\", \n         docvarnames = c(\"int\", \"année\", \"type\"),\n         dvsep = \"_\")\n\ndata<-readtext(\"le/chemin/de/mes/fichiers/*.docx\")\n\ndata<-readtext(\"le/chemin/de/mes/fichiers/*.pdf\")\n```\n:::\n\n\nPour les problèmes de mise en forme, on consultera la vignette du [package readtext](https://cran.r-project.org/web/packages/readtext/vignettes/readtext_vignette.html#plain-text-files-.txt).\n\nUne autre solution pour les fichiers pdf, permettant d'enlever tous les éléments de mise en forme :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tm)\n#on récupère les noms des fichiers à lire depuis les dossiers\nfiles <- list.files( pattern = \"pdf$\", recursive = T, include.dirs = T)\n\n#on lit les fichiers, sans la mise en forme\ncorp<-Corpus(URISource(files),\n               readerControl = list(reader = readPDF, text=(\"-layout\")))\n#on enlève les sauts de page et autres mises en forme à partir d'espace\ncorp <- tm_map(corp, stripWhitespace)\n```\n:::\n\n\nUn autre outil pour les pdf : le package [pdftools](https://cran.r-project.org/web/packages/pdftools/pdftools.pdf).\n\n### Reconnaissance Optique des Caractères (OCR)\n\nPour ça, on utilise le package [tesseract](https://cran.r-project.org/web/packages/tesseract/vignettes/intro.html) :\n\nExemple avec cette image : ![](N1_avril1909b.jpeg)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tesseract)\ntesseract_download(\"fra\") #pour télécharger le modèle de langage\n\ntext <- tesseract::ocr(\"N1_avril1909b.jpeg\", engine = \"fra\")\n\ncat(text) #pour afficher le texte avec sa mise en page\n```\n:::\n",
    "supporting": [
      "chapter1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}