{
  "hash": "7acc21bfb77f25e1dd6e1721c90fa204",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Analyse du sentiment\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  echo = TRUE,\n  message = FALSE,\n  warning = FALSE)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(quanteda)\nlibrary(quanteda.textstats)\nlibrary(quanteda.textplots)\nlibrary(RColorBrewer)\ndisplay.brewer.all()\n```\n:::\n\n\n\n# Les données\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"data/data_trustpilot_oiseaux.csv\")\n```\n:::\n\n\n\n# *Sentiment analysis*\n\nOn va réaliser une analyse du sentiment du corpus. Pour cela, on utilise le dictionnaire des sentiments et émotions NRC, car il est disponible dans 40 langues, dont le français. Il existe d'autres dictionnaires de sentiments (positif vs négatif), par exemple AFINN ou BING, ainsi que des dictionnaires thématiques (LIWC par exemple), mais ils sont en anglais ou payants, donc utilisables pour des corpus en anglais ou lorsqu'on dispose d'un budget. Les dernières évolutions du traitement en langage naturel des IA (transformers et autres, dont ChatGPT est un exemple), permettent d'autres approches très pertinentes, en utilisant le *machine learning*, mais cela va au-delà des objectifs de ce cours.\n\nIci, on utilise le dictionnaire NRC à travers le package *syuzhet*. La fonction *get_nrc_sentiment* prend en entrée un vecteur de type caractère.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(syuzhet)\n\n# d<-get_nrc_sentiment(data$comments, language = \"french\")\n# write_rds(d, \"sentiment_trustpilot_oiseaux.rds\")\n\nd<-read_rds(\"data/sentiment_trustpilot_oiseaux.rds\")\nsummary(d, digits=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     anger      anticipation     disgust         fear          joy     \n Min.   :0.0   Min.   : 0.0   Min.   :0.0   Min.   :0.0   Min.   :0.0  \n 1st Qu.:0.0   1st Qu.: 0.0   1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0.0  \n Median :0.0   Median : 1.0   Median :0.0   Median :0.0   Median :0.0  \n Mean   :0.1   Mean   : 0.9   Mean   :0.1   Mean   :0.1   Mean   :0.6  \n 3rd Qu.:0.0   3rd Qu.: 1.0   3rd Qu.:0.0   3rd Qu.:0.0   3rd Qu.:1.0  \n Max.   :7.0   Max.   :10.0   Max.   :7.0   Max.   :6.0   Max.   :6.0  \n    sadness       surprise       trust        negative       positive \n Min.   :0.0   Min.   :0.0   Min.   :0.0   Min.   : 0.0   Min.   : 0  \n 1st Qu.:0.0   1st Qu.:0.0   1st Qu.:0.0   1st Qu.: 0.0   1st Qu.: 1  \n Median :0.0   Median :1.0   Median :1.0   Median : 0.0   Median : 2  \n Mean   :0.2   Mean   :0.7   Mean   :0.9   Mean   : 0.4   Mean   : 2  \n 3rd Qu.:0.0   3rd Qu.:1.0   3rd Qu.:1.0   3rd Qu.: 0.0   3rd Qu.: 3  \n Max.   :7.0   Max.   :5.0   Max.   :8.0   Max.   :12.0   Max.   :14  \n```\n\n\n:::\n\n```{.r .cell-code}\ndata<-cbind(data,d)\n\ndata[600,8:17]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    anger anticipation disgust fear joy sadness surprise trust negative\n600     0            1       0    1   1       0        1     1        0\n    positive\n600        1\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[600,\"comments\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Commande reçu dans les temps pas de surprise. Très bon site\"\n```\n\n\n:::\n:::\n\n\n\nLe dictionnaire comprend 10 variables, 8 émotions et 2 sentiments. Pour représenter les données, nous avons besoin de les transformer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ne<-d%>%\n  pivot_longer(everything(),names_to = \"sentiment\", values_to = \"nb\")\n\nggplot(e, aes(sentiment, nb))+\n  geom_col(aes(fill=sentiment),show.legend = FALSE)+\n  theme_minimal()+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_nrc-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Les sentiments\n\nIntéressons-nous d'abord aux sentiments :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsent<-d%>%\n  select(positive,negative)%>%\n  pivot_longer(everything(), names_to = \"sentiment\", values_to = \"nb\")%>%\n  summarise(nb=sum(nb), .by = sentiment)%>%\n  mutate(prop=nb/sum(nb))\n\nggplot(data=sent,  aes(x=sentiment, y=prop)) + \n  geom_bar(stat=\"identity\", aes(fill=sentiment), show.legend = FALSE)+\n  scale_y_continuous(labels=scales::percent) +\n  labs(title = \"Répartition des sentiments dans le corpus Oiseaux Mania\",caption = \"Données TrustPilot\",x=\"Sentiments\",y=NULL)+\n  scale_fill_manual(values=c(\"red\", \"lightgreen\"))+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_sent-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLe corpus est très largement positif, ce qui n'est pas étonnant. On peut aussi créer d'autres indicateurs, comme la valence (différence positif-négatif) ou l'expressivité (somme de positif+négatif).\n\n**Exercice :** personnalisez le graphique ci-dessous pour la variable d'expressivité.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-data%>%\n  mutate(nbcar=nchar(comments),\n         valence = positive-negative)\n\nggplot(data = data, aes(x = valence, y= nbcar))+\n  geom_point()+\n  geom_smooth()+\n  labs(title=\"Indicateur de valence\", subtitle = \"en fonction du nombre de caractères\", caption=\"Données TrustPilot\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_expr-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ndata<-data%>%\n  mutate(nbcar=nchar(comments),\n         expressivité = positive+negative)\n\nggplot(data = data, aes(x = expressivité, y= nbcar))+\n  geom_point()+\n  geom_smooth()+\n  labs(title=\"Indicateur d'expressivité\", subtitle = \"en fonction du nombre de caractères\", caption=\"Données TrustPilot\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_expr-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Les émotions\n\nRegardons maintenant ce qu'il en est de la répartition des émotions :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#On crée d'abord une palette pour les émotions\nemocol<-c(\"yellow\",\"chartreuse\",\"olivedrab3\",\"green4\",\"royalblue3\",\"purple3\",\"red3\",\"orangered1\") \n\n\nemo<-d%>%\n  select(-positive, -negative)%>% #On récupère les émotions\n  pivot_longer(everything(), names_to = \"emotion\", values_to = \"nb\")#On transforme le tableau\n \nemo2<-emo%>%\n  summarise(nb=sum(nb), .by = emotion)%>%\n  mutate(prop=nb/sum(nb),\n          emotion=factor(emotion, ordered = TRUE,levels = c(\"joy\",\"trust\",\"fear\",\"surprise\",\"sadness\",\"disgust\",\"anger\",\"anticipation\")))\n\n#On crée un graphique circulaire\nggplot(data=emo2,  aes(x=emotion, y=prop, colour=emotion)) + \n  geom_bar(stat=\"identity\", aes(fill=emotion), show.legend = FALSE)+ \n  scale_y_continuous(labels=scales::percent)+\n  labs(title=\"Distribution des émotions \\n dans le corpus Oiseaux Mania\", caption=\"Données TrustPilot\", x=\"Emotions\", y=NULL) +\n  coord_polar()+ \n  scale_color_manual(values=emocol)+ scale_fill_manual(values=emocol)+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_emo-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n#On regarde la répartition des émotions dans le corpus :\n\nggplot(emo, aes(x=emotion, y=nb))+\n  geom_violin(aes(fill=emotion), alpha=0.7,adjust = 2)+\n  theme_minimal()+ scale_fill_manual(values=emocol)+\n  scale_x_discrete(labels=NULL)\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_emo-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggplot(emo, aes(x=emotion, y=nb))+\n  geom_boxplot(aes(fill=emotion,), alpha=0.7,adjust = 2, show.legend = FALSE)+\n  theme_minimal()+ scale_fill_manual(values=emocol)\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_emo-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Évolution du corpus dans le temps\n\nOn va regarder comment les sentiments évoluent dans le temps. On doit tout d'abord créer une variable temporel dans notre jeu de données. Nous en avons déjà une, qui indique la date et l'heure à laquelle le commentaire a été posté. Nous allons la transformer pour regrouper les commentaires en fonction de l'année (on peut le faire pour les jours, les mois, les minutes, ...).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata%>%group_by(year)%>%summarise('nb com'=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 x 2\n    year `nb com`\n   <dbl>    <int>\n 1  2013      125\n 2  2014      209\n 3  2015      249\n 4  2016      171\n 5  2017      324\n 6  2018      341\n 7  2019      375\n 8  2020      735\n 9  2021      853\n10  2022      623\n11  2023      383\n```\n\n\n:::\n:::\n\n\n\nRegardons maintenant comment évolue les sentiments dans le temps :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#les émotions\n##mise en forme des données\ngen_sent<-data%>%\n  mutate(year=as.factor(year))%>%\n  group_by(year)%>%\n  summarise(across(7:14,~mean(.x, na.rm = T)))%>%\n  na.exclude()%>%\n  pivot_longer(-year, names_to = \"emotion\", values_to = \"mean\")%>%\n  mutate(emotion=factor(emotion, ordered = TRUE,levels = c(\"joy\",\"trust\",\"fear\",\"surprise\",\"sadness\",\"disgust\",\"anger\",\"anticipation\")))\n\n##graphique\nggplot(gen_sent,aes(x=year, y=mean,group=emotion)) +\n  geom_line(aes(color=emotion), linewidth=0.5) + \n  theme_minimal()+\n  scale_color_manual(values = emocol)\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_sent_year-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n#les sentiments\n##mise en forme des données\ngen_sent2<-data%>%\n  mutate(year=as.factor(year))%>%\n  group_by(year)%>%\n  summarise(across(c(positive, negative),~mean(.x, na.rm = T)))%>%\n  na.exclude()%>%\n  pivot_longer(-year, names_to = \"sentiment\",values_to = \"mean\")\n\n##graphique\nggplot(gen_sent2,aes(x=year, y=mean,group=sentiment)) +\n  geom_line(aes(color=sentiment), linewidth=0.5) + \n  theme_minimal()+\n  scale_color_manual(values = c(\"red\",\"lightgreen\"))\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/viz_sent_year-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nMaintenant, on va s'intéresser aux mots.\n\n# Nuage de mots comparés\n\n## En fonction des années\n\nOn refait les manipulations préliminaires :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-data%>%\n  mutate(year2=case_when(year<2017~\"2013-2016\",\n                         year %in% c(2017:2019)~\"2017-2019\",\n                         .default=as.character(year)))\n\ncorpus_oiseaux<-corpus(data, text_field = \"comments\")\n\ntok<-tokens(corpus_oiseaux, remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE)%>%\n  tokens_remove(stopwords(\"fr\"))\n\ndfm<-dfm(tok)\n```\n:::\n\n\n\nComparons les mots en fonction des années :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfmgp<-dfm_group(dfm, groups = year2)\ndfmgp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDocument-feature matrix of: 6 documents, 5,392 features (66.69% sparse) and 1 docvar.\n           features\ndocs        comme toujours super service changez rien sauf peut être là\n  2013-2016    38       26    93      58       0   71    6   17    9  8\n  2017-2019    32       61    74      78       0   76    5   13   24  4\n  2020         27       38    42      65       0   51    0    5    6  1\n  2021         35       49    49      64       2   62    8   11   11  2\n  2022         36       49    46      59       0   36    0    4    3  3\n  2023         16       51    22      27       2   21    3    6    3  4\n[ reached max_nfeat ... 5,382 more features ]\n```\n\n\n:::\n\n```{.r .cell-code}\n#On peut aussi passer la fonction directement en transformant en dfm avec l'option groups : dfm(tok, groups=\"year\")\n\ntextplot_wordcloud(dfmgp, comparison=TRUE, max_words = 200)\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/wc_year-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## En fonction des sentiments\n\nPour comparer en fonction des sentiments, il faut accéder au dictionnaire NRC (en français) (il y a des fonctions simplifiées pour les dictionnaires en anglais) :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndic_nrc<-read_xlsx(\"NRCfr.xlsx\")%>%\n  pivot_longer(-word,names_to = \"sentiment\", values_to=\"value\")%>%\n  filter(value==1, word!=\"NO TRANSLATION\")%>%\n  select(-value)\n\nsent_term<-convert(dfm,to=\"data.frame\")%>%\n  select(-doc_id)%>%\n  pivot_longer(everything(), names_to=\"word\", values_to=\"value\")%>%\n  filter(value!=0)%>%\n  summarise(value=sum(value), .by=word)%>%\n  inner_join(dic_nrc)%>%\n  slice_max(n=10, by=sentiment, order_by = value, with_ties=F)\n\n\nggplot(sent_term, aes(reorder(word, value), value, fill = sentiment)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~sentiment, scales = \"free_y\") +\n  labs(y = \"Contribution to sentiment\",\n       x = NULL) +\n  coord_flip()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chapter3_files/figure-pdf/comp_sent-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "chapter3_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}