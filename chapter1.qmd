---
title: "Prise en main"
execute: 
  eval: false
---

## Introduction

Le document de travail contient deux types d'éléments : du texte pour expliquer et présenter ce que l'on fait et du code pour réaliser les manipulations de données, les analyses et les graphiques. On commence toujours un document avec un bloc de code de setup, pour lister et charger les packages que l'on va utiliser et les options générales pour l'édition du document.

La publication des documents peut se faire en différents formats : html, word, pdf (via latex), présentation html (via revealjs), présentation powerpoint, présentation beamer(via latex), ...
On se référera au site de [Quarto](https://quarto.org/) pour plus de détails.

Ici, on commence simplement avec quelques manipulations pour comprendre l'environnement de travail, puis on verra comment charger des données sous différents formats.

## Premières manipulations

-   Créer un document script (.R) : pour simplement éditer du code
-   Créer un document quarto (.qmd) : pour mixer du code et du texte
-   Commenter du code : #vous permet d'écrire un commentaire dans le code
-   Afficher de l'aide sur une fonction : F1 ou lancer la ligne ?'nom de la fonction'


## Charger des données

### Un tableau de données

Fichier .csv, .xlsx, .rds

```{r}
data<-read.csv("le/chemin/de/mon/fichier.csv")

library(readxl)
data<-read_xlsx("le/chemin/de/mon/fichier.xlsx")

library(readr)
data<- read_rds("le/chemin/de/mon/fichier.rds")


```


### Une collection de fichier textes

Un dossier avec plusieurs fichier .txt ou .docx ou .pdf

```{r}
library(readtext)
#Exemple de nom de document : "int1_2024_dirigeant.txt"
data<-readtext("le/chemin/de/mes/fichiers/*.txt",
         docvarsfrom = "filenames", 
         docvarnames = c("int", "année", "type"),
         dvsep = "_")

data<-readtext("le/chemin/de/mes/fichiers/*.docx")

data<-readtext("le/chemin/de/mes/fichiers/*.pdf")

```

Pour les problèmes de mise en forme, on consultera la vignette du [package readtext](https://cran.r-project.org/web/packages/readtext/vignettes/readtext_vignette.html#plain-text-files-.txt).

Une autre solution pour les fichiers pdf, permettant d'enlever tous les éléments de mise en forme :

```{r}
library(tm)
#on récupère les noms des fichiers à lire depuis les dossiers
files <- list.files( pattern = "pdf$", recursive = T, include.dirs = T)

#on lit les fichiers, sans la mise en forme
corp<-Corpus(URISource(files),
               readerControl = list(reader = readPDF, text=("-layout")))
#on enlève les sauts de page et autres mises en forme à partir d'espace
corp <- tm_map(corp, stripWhitespace)
```

Un autre outil pour les pdf : le package [pdftools](https://cran.r-project.org/web/packages/pdftools/pdftools.pdf).

### Reconnaissance Optique des Caractères (OCR)

Pour ça, on utilise le package [tesseract](https://cran.r-project.org/web/packages/tesseract/vignettes/intro.html) :

Exemple avec cette image : ![](N1_avril1909b.jpeg)


```{r}
library(tesseract)
tesseract_download("fra") #pour télécharger le modèle de langage

text <- tesseract::ocr("N1_avril1909b.jpeg", engine = "fra")

cat(text) #pour afficher le texte avec sa mise en page
```


